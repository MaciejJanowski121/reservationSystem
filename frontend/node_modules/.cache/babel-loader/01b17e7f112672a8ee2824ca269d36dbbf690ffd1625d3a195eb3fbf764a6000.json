{"ast":null,"code":"var _jsxFileName = \"/Users/maciejjanowski/Desktop/reservationSystem/frontend/src/components/ReservationForm.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReservationForm({\n  setReservation\n}) {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [startTime, setStartTime] = useState(\"\");\n  const [tableNumber, setTableNumber] = useState(\"\");\n  const [availableTables, setAvailableTables] = useState([]);\n  const navigate = useNavigate();\n\n  // 🔹 helper: lokalny czas (bez UTC przesunięć)\n  const formatLocalDateTime = date => {\n    const pad = n => n < 10 ? \"0\" + n : n;\n    return date.getFullYear() + \"-\" + pad(date.getMonth() + 1) + \"-\" + pad(date.getDate()) + \"T\" + pad(date.getHours()) + \":\" + pad(date.getMinutes()) + \":\" + pad(date.getSeconds());\n  };\n\n  // 🔹 pobieranie dostępnych stolików (zawsze 2h)\n  useEffect(() => {\n    const fetchAvailableTables = async () => {\n      if (!startTime) return;\n      const start = new Date(startTime);\n      try {\n        const res = await fetch(`http://localhost:8080/api/reservations/available?start=${formatLocalDateTime(start)}`, {\n          credentials: \"include\"\n        });\n        if (!res.ok) throw new Error(\"Fehler beim Laden der verfügbaren Tische\");\n        const data = await res.json();\n        setAvailableTables(data);\n      } catch (err) {\n        console.error(\"Fehler beim Abrufen:\", err);\n        setAvailableTables([]);\n      }\n    };\n    fetchAvailableTables();\n  }, [startTime]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const start = new Date(startTime);\n    if (start < new Date()) {\n      alert(\"❌ Du kannst keine Reservierung in der Vergangenheit anlegen!\");\n      return;\n    }\n    const newReservation = {\n      tableNumber,\n      reservation: {\n        name,\n        email,\n        phone,\n        startTime\n      }\n      // ⬆️ backend liczy endTime = start + 2h\n    };\n    try {\n      const response = await fetch(\"http://localhost:8080/api/reservations\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(newReservation)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(\"Fehler beim Senden der Reservierung: \" + errorText);\n      }\n      const data = await response.json();\n      setReservation([data]);\n      navigate(\"/reservations/my\");\n    } catch (err) {\n      console.error(\"Fehler beim Hinzufügen:\", err);\n      alert(\"❌ Reservierung fehlgeschlagen: \" + err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"reservation-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Name\",\n      value: name,\n      onChange: e => setName(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"E-Mail\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"tel\",\n      placeholder: \"Telefonnummer\",\n      value: phone,\n      onChange: e => setPhone(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: startTime,\n      onChange: e => setStartTime(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: tableNumber,\n      onChange: e => setTableNumber(e.target.value),\n      required: true,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"W\\xE4hle einen Tisch...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), availableTables.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: t.tableNumber,\n        children: [\"Tisch \", t.tableNumber, \" (\", t.numberOfSeats, \" Personen)\"]\n      }, t.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Reservieren\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n_s(ReservationForm, \"fyxPDXKx1+CTeotDIct4/1oqEsw=\", false, function () {\n  return [useNavigate];\n});\n_c = ReservationForm;\nexport default ReservationForm;\nvar _c;\n$RefreshReg$(_c, \"ReservationForm\");","map":{"version":3,"names":["useState","useEffect","useNavigate","jsxDEV","_jsxDEV","ReservationForm","setReservation","_s","name","setName","email","setEmail","phone","setPhone","startTime","setStartTime","tableNumber","setTableNumber","availableTables","setAvailableTables","navigate","formatLocalDateTime","date","pad","n","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","fetchAvailableTables","start","Date","res","fetch","credentials","ok","Error","data","json","err","console","error","handleSubmit","e","preventDefault","alert","newReservation","reservation","response","method","headers","body","JSON","stringify","errorText","text","message","onSubmit","className","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","map","t","numberOfSeats","id","_c","$RefreshReg$"],"sources":["/Users/maciejjanowski/Desktop/reservationSystem/frontend/src/components/ReservationForm.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction ReservationForm({ setReservation }) {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [startTime, setStartTime] = useState(\"\");\n    const [tableNumber, setTableNumber] = useState(\"\");\n    const [availableTables, setAvailableTables] = useState([]);\n\n    const navigate = useNavigate();\n\n    // 🔹 helper: lokalny czas (bez UTC przesunięć)\n    const formatLocalDateTime = (date) => {\n        const pad = (n) => (n < 10 ? \"0\" + n : n);\n        return (\n            date.getFullYear() +\n            \"-\" +\n            pad(date.getMonth() + 1) +\n            \"-\" +\n            pad(date.getDate()) +\n            \"T\" +\n            pad(date.getHours()) +\n            \":\" +\n            pad(date.getMinutes()) +\n            \":\" +\n            pad(date.getSeconds())\n        );\n    };\n\n    // 🔹 pobieranie dostępnych stolików (zawsze 2h)\n    useEffect(() => {\n        const fetchAvailableTables = async () => {\n            if (!startTime) return;\n\n            const start = new Date(startTime);\n\n            try {\n                const res = await fetch(\n                    `http://localhost:8080/api/reservations/available?start=${formatLocalDateTime(start)}`,\n                    { credentials: \"include\" }\n                );\n                if (!res.ok) throw new Error(\"Fehler beim Laden der verfügbaren Tische\");\n\n                const data = await res.json();\n                setAvailableTables(data);\n            } catch (err) {\n                console.error(\"Fehler beim Abrufen:\", err);\n                setAvailableTables([]);\n            }\n        };\n\n        fetchAvailableTables();\n    }, [startTime]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const start = new Date(startTime);\n        if (start < new Date()) {\n            alert(\"❌ Du kannst keine Reservierung in der Vergangenheit anlegen!\");\n            return;\n        }\n\n        const newReservation = {\n            tableNumber,\n            reservation: { name, email, phone, startTime }\n            // ⬆️ backend liczy endTime = start + 2h\n        };\n\n        try {\n            const response = await fetch(\"http://localhost:8080/api/reservations\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                credentials: \"include\",\n                body: JSON.stringify(newReservation),\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(\"Fehler beim Senden der Reservierung: \" + errorText);\n            }\n\n            const data = await response.json();\n            setReservation([data]);\n            navigate(\"/reservations/my\");\n        } catch (err) {\n            console.error(\"Fehler beim Hinzufügen:\", err);\n            alert(\"❌ Reservierung fehlgeschlagen: \" + err.message);\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"reservation-form\">\n            <input type=\"text\" placeholder=\"Name\" value={name} onChange={(e) => setName(e.target.value)} required />\n            <input type=\"email\" placeholder=\"E-Mail\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n            <input type=\"tel\" placeholder=\"Telefonnummer\" value={phone} onChange={(e) => setPhone(e.target.value)} required />\n\n            {/* 🔹 Startzeit = wybór daty i godziny */}\n            <input\n                type=\"datetime-local\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                required\n            />\n\n            {/* 🔹 tylko dostępne stoliki */}\n            <select value={tableNumber} onChange={(e) => setTableNumber(e.target.value)} required>\n                <option value=\"\">Wähle einen Tisch...</option>\n                {availableTables.map((t) => (\n                    <option key={t.id} value={t.tableNumber}>\n                        Tisch {t.tableNumber} ({t.numberOfSeats} Personen)\n                    </option>\n                ))}\n            </select>\n\n            <button type=\"submit\">Reservieren</button>\n        </form>\n    );\n}\n\nexport default ReservationForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}