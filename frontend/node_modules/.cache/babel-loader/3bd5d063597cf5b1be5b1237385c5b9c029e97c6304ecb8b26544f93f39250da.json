{"ast":null,"code":"var _jsxFileName = \"/Users/maciejjanowski/Desktop/reservationSystem/frontend/src/components/ReservationForm.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReservationForm({\n  setReservation\n}) {\n  _s();\n  const [startTime, setStartTime] = useState(\"\"); // \"YYYY-MM-DDTHH:mm\"\n  const [minutes, setMinutes] = useState(120); // 30..300\n  const [tableNumber, setTableNumber] = useState(\"\");\n  const [availableTables, setAvailableTables] = useState([]);\n  const [formError, setFormError] = useState(\"\");\n  const navigate = useNavigate();\n  const API = useMemo(() => process.env.REACT_APP_API_URL || \"http://localhost:8080\", []);\n\n  // --- Geschäftsregeln ---\n  const MIN_MIN = 30;\n  const MAX_MIN = 300;\n  const CLOSING_HOUR = 22; // Reservierungen maximal bis 22:00 Uhr\n\n  // Zeit-Helferfunktionen\n  const pad = n => n < 10 ? \"0\" + n : n;\n  const toIsoWithSeconds = date => `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n  const parseLocalDateTime = value => value ? new Date(value + \":00\") : null;\n\n  // Ermittelt die maximal erlaubte Dauer, sodass Ende <= 22:00 Uhr\n  const maxMinutesForStart = start => {\n    if (!start) return MAX_MIN;\n    const latestEnd = new Date(start);\n    latestEnd.setHours(CLOSING_HOUR, 0, 0, 0); // 22:00 Uhr desselben Tages\n    const diffMs = latestEnd.getTime() - start.getTime();\n    const diffMin = Math.floor(diffMs / 60000);\n    if (diffMin <= 0) return 0; // zu spät\n    return Math.min(MAX_MIN, diffMin);\n  };\n\n  // Verfügbare Tische abrufen\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      setFormError(\"\");\n      if (!startTime || !minutes) {\n        setAvailableTables([]);\n        return;\n      }\n      const start = parseLocalDateTime(startTime);\n      if (!start) return;\n      const maxAllowed = maxMinutesForStart(start);\n      if (maxAllowed < MIN_MIN) {\n        setAvailableTables([]);\n        return;\n      }\n      const startISO = toIsoWithSeconds(start);\n      try {\n        const res = await fetch(`${API}/api/reservations/available?start=${encodeURIComponent(startISO)}&minutes=${minutes}`, {\n          credentials: \"include\"\n        });\n        if (!res.ok) throw new Error(\"Fehler beim Laden der verfügbaren Tische.\");\n        const data = await res.json();\n        setAvailableTables(Array.isArray(data) ? data : []);\n      } catch (e) {\n        console.error(e);\n        setAvailableTables([]);\n      }\n    };\n    fetchAvailable();\n  }, [startTime, minutes, API]);\n\n  // Auswahl zurücksetzen, wenn Tisch nicht mehr verfügbar\n  useEffect(() => {\n    if (!tableNumber) return;\n    const stillAvailable = availableTables.some(t => String(t.tableNumber) === String(tableNumber));\n    if (!stillAvailable) setTableNumber(\"\");\n  }, [tableNumber, availableTables]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setFormError(\"\");\n    const start = parseLocalDateTime(startTime);\n    if (!start) return setFormError(\"Bitte Startzeit auswählen.\");\n    if (start < new Date()) return setFormError(\"Reservierungen in der Vergangenheit sind nicht möglich.\");\n    if (!minutes || minutes < MIN_MIN || minutes > MAX_MIN) return setFormError(\"Die Dauer muss zwischen 30 und 300 Minuten liegen.\");\n    const maxAllowed = maxMinutesForStart(start);\n    if (minutes > maxAllowed) {\n      if (maxAllowed < MIN_MIN) {\n        return setFormError(\"Die letzte Reservierung muss spätestens um 22:00 Uhr enden. Bitte frühere Zeit wählen.\");\n      }\n      return setFormError(`Für diese Startzeit ist maximal ${maxAllowed} Minuten erlaubt (bis 22:00 Uhr).`);\n    }\n    if (!tableNumber) return setFormError(\"Bitte Tisch auswählen.\");\n    const end = new Date(start.getTime() + minutes * 60 * 1000);\n    const payload = {\n      tableNumber: Number(tableNumber),\n      startTime: toIsoWithSeconds(start),\n      endTime: toIsoWithSeconds(end)\n    };\n    try {\n      const resp = await fetch(`${API}/api/reservations`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify(payload)\n      });\n      const txt = await resp.text();\n      if (!resp.ok) {\n        throw new Error(txt || \"Reservierung fehlgeschlagen – bitte versuchen Sie es erneut.\");\n      }\n      const data = txt ? JSON.parse(txt) : null;\n      setReservation([data]);\n      navigate(\"/reservations/my\");\n    } catch (err) {\n      console.error(err);\n      setFormError(`Reservierung fehlgeschlagen: ${err.message}`);\n    }\n  };\n\n  // Mindestzeit für datetime-local\n  const nowLocalForMin = useMemo(() => {\n    const d = new Date();\n    d.setSeconds(0, 0);\n    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;\n  }, []);\n\n  // Dropdown für Dauer (nur gültige Optionen)\n  const renderDurationOptions = () => {\n    const start = parseLocalDateTime(startTime);\n    const maxAllowed = maxMinutesForStart(start);\n    const items = [];\n    for (let m = MIN_MIN; m <= MAX_MIN; m += 30) {\n      const disabled = start && m > maxAllowed;\n      const label = m < 60 ? `${m} Min` : `${Math.floor(m / 60)} Std${m % 60 ? ` ${m % 60} Min` : \"\"}`;\n      items.push(/*#__PURE__*/_jsxDEV(\"option\", {\n        value: m,\n        disabled: disabled,\n        children: [label, disabled ? \" (bis 22:00 Uhr)\" : \"\"]\n      }, m, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this));\n    }\n    return items;\n  };\n  const start = parseLocalDateTime(startTime);\n  const maxAllowedForHint = maxMinutesForStart(start);\n  const endPreview = start && minutes ? new Date(start.getTime() + minutes * 60000) : null;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"reservation-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        display: \"block\",\n        marginBottom: 4\n      },\n      children: \"Beginn der Reservierung\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: startTime,\n      min: nowLocalForMin,\n      onChange: e => {\n        setStartTime(e.target.value);\n        setFormError(\"\");\n      },\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n      style: {\n        display: \"block\",\n        marginTop: 4,\n        color: \"#555\"\n      },\n      children: [\"Reservierungen sind nur bis \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"22:00 Uhr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 45\n      }, this), \" am selben Tag m\\xF6glich.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        display: \"block\",\n        margin: \"12px 0 4px\"\n      },\n      children: \"Dauer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: minutes,\n      onChange: e => {\n        setMinutes(Number(e.target.value));\n        setFormError(\"\");\n      },\n      required: true,\n      children: renderDurationOptions()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n      style: {\n        display: \"block\",\n        marginTop: 4,\n        color: \"#555\"\n      },\n      children: [\"Erlaubter Bereich: 30\\u2013300 Minuten.\", \" \", start ? maxAllowedForHint < MIN_MIN ? \"Für diese Startzeit ist keine Reservierung mehr möglich (Ende spätestens 22:00 Uhr).\" : `Für diese Startzeit: max. ${maxAllowedForHint} Min (bis 22:00 Uhr).` : \"Bitte Startzeit wählen, um die maximale Dauer zu sehen.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        display: \"block\",\n        margin: \"12px 0 4px\"\n      },\n      children: \"Tisch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: tableNumber,\n      onChange: e => setTableNumber(e.target.value),\n      required: true,\n      disabled: maxAllowedForHint < MIN_MIN,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Tisch ausw\\xE4hlen\\u2026\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), availableTables.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: t.tableNumber,\n        children: [\"Tisch \", t.tableNumber, \" (\", t.numberOfSeats, \" Pers.)\"]\n      }, t.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), endPreview && /*#__PURE__*/_jsxDEV(\"small\", {\n      style: {\n        display: \"block\",\n        marginTop: 6,\n        color: \"#555\"\n      },\n      children: [\"Ende:\", \" \", endPreview.toLocaleTimeString(\"de-DE\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      }), \" \", \"(sp\\xE4testens 22:00 Uhr)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }, this), formError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"#c62828\",\n        marginTop: 10\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      style: {\n        marginTop: 12\n      },\n      disabled: maxAllowedForHint < MIN_MIN,\n      children: \"Reservieren\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n}\n_s(ReservationForm, \"/6IadRH0K59YvM7MvlrzuDpna/A=\", false, function () {\n  return [useNavigate];\n});\n_c = ReservationForm;\nexport default ReservationForm;\nvar _c;\n$RefreshReg$(_c, \"ReservationForm\");","map":{"version":3,"names":["useState","useEffect","useMemo","useNavigate","jsxDEV","_jsxDEV","ReservationForm","setReservation","_s","startTime","setStartTime","minutes","setMinutes","tableNumber","setTableNumber","availableTables","setAvailableTables","formError","setFormError","navigate","API","process","env","REACT_APP_API_URL","MIN_MIN","MAX_MIN","CLOSING_HOUR","pad","n","toIsoWithSeconds","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parseLocalDateTime","value","Date","maxMinutesForStart","start","latestEnd","setHours","diffMs","getTime","diffMin","Math","floor","min","fetchAvailable","maxAllowed","startISO","res","fetch","encodeURIComponent","credentials","ok","Error","data","json","Array","isArray","e","console","error","stillAvailable","some","t","String","handleSubmit","preventDefault","end","payload","Number","endTime","resp","method","headers","body","JSON","stringify","txt","text","parse","err","message","nowLocalForMin","d","setSeconds","renderDurationOptions","items","m","disabled","label","push","children","fileName","_jsxFileName","lineNumber","columnNumber","maxAllowedForHint","endPreview","onSubmit","className","style","display","marginBottom","type","onChange","target","required","marginTop","color","margin","map","numberOfSeats","id","toLocaleTimeString","hour","minute","_c","$RefreshReg$"],"sources":["/Users/maciejjanowski/Desktop/reservationSystem/frontend/src/components/ReservationForm.jsx"],"sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction ReservationForm({ setReservation }) {\n    const [startTime, setStartTime] = useState(\"\"); // \"YYYY-MM-DDTHH:mm\"\n    const [minutes, setMinutes] = useState(120); // 30..300\n    const [tableNumber, setTableNumber] = useState(\"\");\n    const [availableTables, setAvailableTables] = useState([]);\n    const [formError, setFormError] = useState(\"\");\n\n    const navigate = useNavigate();\n    const API = useMemo(\n        () => process.env.REACT_APP_API_URL || \"http://localhost:8080\",\n        []\n    );\n\n    // --- Geschäftsregeln ---\n    const MIN_MIN = 30;\n    const MAX_MIN = 300;\n    const CLOSING_HOUR = 22; // Reservierungen maximal bis 22:00 Uhr\n\n    // Zeit-Helferfunktionen\n    const pad = (n) => (n < 10 ? \"0\" + n : n);\n    const toIsoWithSeconds = (date) =>\n        `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\n            date.getDate()\n        )}T${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(\n            date.getSeconds()\n        )}`;\n\n    const parseLocalDateTime = (value) => (value ? new Date(value + \":00\") : null);\n\n    // Ermittelt die maximal erlaubte Dauer, sodass Ende <= 22:00 Uhr\n    const maxMinutesForStart = (start) => {\n        if (!start) return MAX_MIN;\n        const latestEnd = new Date(start);\n        latestEnd.setHours(CLOSING_HOUR, 0, 0, 0); // 22:00 Uhr desselben Tages\n        const diffMs = latestEnd.getTime() - start.getTime();\n        const diffMin = Math.floor(diffMs / 60000);\n        if (diffMin <= 0) return 0; // zu spät\n        return Math.min(MAX_MIN, diffMin);\n    };\n\n    // Verfügbare Tische abrufen\n    useEffect(() => {\n        const fetchAvailable = async () => {\n            setFormError(\"\");\n            if (!startTime || !minutes) {\n                setAvailableTables([]);\n                return;\n            }\n\n            const start = parseLocalDateTime(startTime);\n            if (!start) return;\n\n            const maxAllowed = maxMinutesForStart(start);\n            if (maxAllowed < MIN_MIN) {\n                setAvailableTables([]);\n                return;\n            }\n\n            const startISO = toIsoWithSeconds(start);\n\n            try {\n                const res = await fetch(\n                    `${API}/api/reservations/available?start=${encodeURIComponent(\n                        startISO\n                    )}&minutes=${minutes}`,\n                    { credentials: \"include\" }\n                );\n                if (!res.ok) throw new Error(\"Fehler beim Laden der verfügbaren Tische.\");\n                const data = await res.json();\n                setAvailableTables(Array.isArray(data) ? data : []);\n            } catch (e) {\n                console.error(e);\n                setAvailableTables([]);\n            }\n        };\n\n        fetchAvailable();\n    }, [startTime, minutes, API]);\n\n    // Auswahl zurücksetzen, wenn Tisch nicht mehr verfügbar\n    useEffect(() => {\n        if (!tableNumber) return;\n        const stillAvailable = availableTables.some(\n            (t) => String(t.tableNumber) === String(tableNumber)\n        );\n        if (!stillAvailable) setTableNumber(\"\");\n    }, [tableNumber, availableTables]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setFormError(\"\");\n\n        const start = parseLocalDateTime(startTime);\n        if (!start) return setFormError(\"Bitte Startzeit auswählen.\");\n        if (start < new Date())\n            return setFormError(\"Reservierungen in der Vergangenheit sind nicht möglich.\");\n\n        if (!minutes || minutes < MIN_MIN || minutes > MAX_MIN)\n            return setFormError(\"Die Dauer muss zwischen 30 und 300 Minuten liegen.\");\n\n        const maxAllowed = maxMinutesForStart(start);\n        if (minutes > maxAllowed) {\n            if (maxAllowed < MIN_MIN) {\n                return setFormError(\n                    \"Die letzte Reservierung muss spätestens um 22:00 Uhr enden. Bitte frühere Zeit wählen.\"\n                );\n            }\n            return setFormError(\n                `Für diese Startzeit ist maximal ${maxAllowed} Minuten erlaubt (bis 22:00 Uhr).`\n            );\n        }\n\n        if (!tableNumber) return setFormError(\"Bitte Tisch auswählen.\");\n\n        const end = new Date(start.getTime() + minutes * 60 * 1000);\n\n        const payload = {\n            tableNumber: Number(tableNumber),\n            startTime: toIsoWithSeconds(start),\n            endTime: toIsoWithSeconds(end),\n        };\n\n        try {\n            const resp = await fetch(`${API}/api/reservations`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                credentials: \"include\",\n                body: JSON.stringify(payload),\n            });\n\n            const txt = await resp.text();\n            if (!resp.ok) {\n                throw new Error(\n                    txt || \"Reservierung fehlgeschlagen – bitte versuchen Sie es erneut.\"\n                );\n            }\n\n            const data = txt ? JSON.parse(txt) : null;\n            setReservation([data]);\n            navigate(\"/reservations/my\");\n        } catch (err) {\n            console.error(err);\n            setFormError(`Reservierung fehlgeschlagen: ${err.message}`);\n        }\n    };\n\n    // Mindestzeit für datetime-local\n    const nowLocalForMin = useMemo(() => {\n        const d = new Date();\n        d.setSeconds(0, 0);\n        return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(\n            d.getDate()\n        )}T${pad(d.getHours())}:${pad(d.getMinutes())}`;\n    }, []);\n\n    // Dropdown für Dauer (nur gültige Optionen)\n    const renderDurationOptions = () => {\n        const start = parseLocalDateTime(startTime);\n        const maxAllowed = maxMinutesForStart(start);\n        const items = [];\n        for (let m = MIN_MIN; m <= MAX_MIN; m += 30) {\n            const disabled = start && m > maxAllowed;\n            const label =\n                m < 60\n                    ? `${m} Min`\n                    : `${Math.floor(m / 60)} Std${m % 60 ? ` ${m % 60} Min` : \"\"}`;\n            items.push(\n                <option key={m} value={m} disabled={disabled}>\n                    {label}\n                    {disabled ? \" (bis 22:00 Uhr)\" : \"\"}\n                </option>\n            );\n        }\n        return items;\n    };\n\n    const start = parseLocalDateTime(startTime);\n    const maxAllowedForHint = maxMinutesForStart(start);\n    const endPreview =\n        start && minutes ? new Date(start.getTime() + minutes * 60000) : null;\n\n    return (\n        <form onSubmit={handleSubmit} className=\"reservation-form\">\n            {/* Startzeit */}\n            <label style={{ display: \"block\", marginBottom: 4 }}>\n                Beginn der Reservierung\n            </label>\n            <input\n                type=\"datetime-local\"\n                value={startTime}\n                min={nowLocalForMin}\n                onChange={(e) => {\n                    setStartTime(e.target.value);\n                    setFormError(\"\");\n                }}\n                required\n            />\n            <small style={{ display: \"block\", marginTop: 4, color: \"#555\" }}>\n                Reservierungen sind nur bis <strong>22:00 Uhr</strong> am selben Tag\n                möglich.\n            </small>\n\n            {/* Dauer */}\n            <label style={{ display: \"block\", margin: \"12px 0 4px\" }}>Dauer</label>\n            <select\n                value={minutes}\n                onChange={(e) => {\n                    setMinutes(Number(e.target.value));\n                    setFormError(\"\");\n                }}\n                required\n            >\n                {renderDurationOptions()}\n            </select>\n            <small style={{ display: \"block\", marginTop: 4, color: \"#555\" }}>\n                Erlaubter Bereich: 30–300 Minuten.{\" \"}\n                {start\n                    ? maxAllowedForHint < MIN_MIN\n                        ? \"Für diese Startzeit ist keine Reservierung mehr möglich (Ende spätestens 22:00 Uhr).\"\n                        : `Für diese Startzeit: max. ${maxAllowedForHint} Min (bis 22:00 Uhr).`\n                    : \"Bitte Startzeit wählen, um die maximale Dauer zu sehen.\"}\n            </small>\n\n            {/* Tischauswahl */}\n            <label style={{ display: \"block\", margin: \"12px 0 4px\" }}>Tisch</label>\n            <select\n                value={tableNumber}\n                onChange={(e) => setTableNumber(e.target.value)}\n                required\n                disabled={maxAllowedForHint < MIN_MIN}\n            >\n                <option value=\"\">Tisch auswählen…</option>\n                {availableTables.map((t) => (\n                    <option key={t.id} value={t.tableNumber}>\n                        Tisch {t.tableNumber} ({t.numberOfSeats} Pers.)\n                    </option>\n                ))}\n            </select>\n\n            {/* Vorschau Endezeit */}\n            {endPreview && (\n                <small style={{ display: \"block\", marginTop: 6, color: \"#555\" }}>\n                    Ende:{\" \"}\n                    {endPreview.toLocaleTimeString(\"de-DE\", {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                    })}{\" \"}\n                    (spätestens 22:00 Uhr)\n                </small>\n            )}\n\n            {/* Fehlermeldungen */}\n            {formError && (\n                <p style={{ color: \"#c62828\", marginTop: 10 }}>{formError}</p>\n            )}\n\n            <button\n                type=\"submit\"\n                style={{ marginTop: 12 }}\n                disabled={maxAllowedForHint < MIN_MIN}\n            >\n                Reservieren\n            </button>\n        </form>\n    );\n}\n\nexport default ReservationForm;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,eAAeA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMmB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAC9B,MAAMiB,GAAG,GAAGlB,OAAO,CACf,MAAMmB,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,EAC9D,EACJ,CAAC;;EAED;EACA,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,OAAO,GAAG,GAAG;EACnB,MAAMC,YAAY,GAAG,EAAE,CAAC,CAAC;;EAEzB;EACA,MAAMC,GAAG,GAAIC,CAAC,IAAMA,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGA,CAAC,GAAGA,CAAE;EACzC,MAAMC,gBAAgB,GAAIC,IAAI,IAC1B,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIJ,GAAG,CAACG,IAAI,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIL,GAAG,CACpDG,IAAI,CAACG,OAAO,CAAC,CACjB,CAAC,IAAIN,GAAG,CAACG,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC,IAAIP,GAAG,CAACG,IAAI,CAACK,UAAU,CAAC,CAAC,CAAC,IAAIR,GAAG,CACtDG,IAAI,CAACM,UAAU,CAAC,CACpB,CAAC,EAAE;EAEP,MAAMC,kBAAkB,GAAIC,KAAK,IAAMA,KAAK,GAAG,IAAIC,IAAI,CAACD,KAAK,GAAG,KAAK,CAAC,GAAG,IAAK;;EAE9E;EACA,MAAME,kBAAkB,GAAIC,KAAK,IAAK;IAClC,IAAI,CAACA,KAAK,EAAE,OAAOhB,OAAO;IAC1B,MAAMiB,SAAS,GAAG,IAAIH,IAAI,CAACE,KAAK,CAAC;IACjCC,SAAS,CAACC,QAAQ,CAACjB,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAMkB,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,CAAC,GAAGJ,KAAK,CAACI,OAAO,CAAC,CAAC;IACpD,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,GAAG,KAAK,CAAC;IAC1C,IAAIE,OAAO,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5B,OAAOC,IAAI,CAACE,GAAG,CAACxB,OAAO,EAAEqB,OAAO,CAAC;EACrC,CAAC;;EAED;EACA7C,SAAS,CAAC,MAAM;IACZ,MAAMiD,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/BhC,YAAY,CAAC,EAAE,CAAC;MAChB,IAAI,CAACT,SAAS,IAAI,CAACE,OAAO,EAAE;QACxBK,kBAAkB,CAAC,EAAE,CAAC;QACtB;MACJ;MAEA,MAAMyB,KAAK,GAAGJ,kBAAkB,CAAC5B,SAAS,CAAC;MAC3C,IAAI,CAACgC,KAAK,EAAE;MAEZ,MAAMU,UAAU,GAAGX,kBAAkB,CAACC,KAAK,CAAC;MAC5C,IAAIU,UAAU,GAAG3B,OAAO,EAAE;QACtBR,kBAAkB,CAAC,EAAE,CAAC;QACtB;MACJ;MAEA,MAAMoC,QAAQ,GAAGvB,gBAAgB,CAACY,KAAK,CAAC;MAExC,IAAI;QACA,MAAMY,GAAG,GAAG,MAAMC,KAAK,CACnB,GAAGlC,GAAG,qCAAqCmC,kBAAkB,CACzDH,QACJ,CAAC,YAAYzC,OAAO,EAAE,EACtB;UAAE6C,WAAW,EAAE;QAAU,CAC7B,CAAC;QACD,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;QACzE,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;QAC7B5C,kBAAkB,CAAC6C,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC;MACvD,CAAC,CAAC,OAAOI,CAAC,EAAE;QACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;QAChB/C,kBAAkB,CAAC,EAAE,CAAC;MAC1B;IACJ,CAAC;IAEDkC,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACzC,SAAS,EAAEE,OAAO,EAAES,GAAG,CAAC,CAAC;;EAE7B;EACAnB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACY,WAAW,EAAE;IAClB,MAAMqD,cAAc,GAAGnD,eAAe,CAACoD,IAAI,CACtCC,CAAC,IAAKC,MAAM,CAACD,CAAC,CAACvD,WAAW,CAAC,KAAKwD,MAAM,CAACxD,WAAW,CACvD,CAAC;IACD,IAAI,CAACqD,cAAc,EAAEpD,cAAc,CAAC,EAAE,CAAC;EAC3C,CAAC,EAAE,CAACD,WAAW,EAAEE,eAAe,CAAC,CAAC;EAElC,MAAMuD,YAAY,GAAG,MAAOP,CAAC,IAAK;IAC9BA,CAAC,CAACQ,cAAc,CAAC,CAAC;IAClBrD,YAAY,CAAC,EAAE,CAAC;IAEhB,MAAMuB,KAAK,GAAGJ,kBAAkB,CAAC5B,SAAS,CAAC;IAC3C,IAAI,CAACgC,KAAK,EAAE,OAAOvB,YAAY,CAAC,4BAA4B,CAAC;IAC7D,IAAIuB,KAAK,GAAG,IAAIF,IAAI,CAAC,CAAC,EAClB,OAAOrB,YAAY,CAAC,yDAAyD,CAAC;IAElF,IAAI,CAACP,OAAO,IAAIA,OAAO,GAAGa,OAAO,IAAIb,OAAO,GAAGc,OAAO,EAClD,OAAOP,YAAY,CAAC,oDAAoD,CAAC;IAE7E,MAAMiC,UAAU,GAAGX,kBAAkB,CAACC,KAAK,CAAC;IAC5C,IAAI9B,OAAO,GAAGwC,UAAU,EAAE;MACtB,IAAIA,UAAU,GAAG3B,OAAO,EAAE;QACtB,OAAON,YAAY,CACf,wFACJ,CAAC;MACL;MACA,OAAOA,YAAY,CACf,mCAAmCiC,UAAU,mCACjD,CAAC;IACL;IAEA,IAAI,CAACtC,WAAW,EAAE,OAAOK,YAAY,CAAC,wBAAwB,CAAC;IAE/D,MAAMsD,GAAG,GAAG,IAAIjC,IAAI,CAACE,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGlC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC;IAE3D,MAAM8D,OAAO,GAAG;MACZ5D,WAAW,EAAE6D,MAAM,CAAC7D,WAAW,CAAC;MAChCJ,SAAS,EAAEoB,gBAAgB,CAACY,KAAK,CAAC;MAClCkC,OAAO,EAAE9C,gBAAgB,CAAC2C,GAAG;IACjC,CAAC;IAED,IAAI;MACA,MAAMI,IAAI,GAAG,MAAMtB,KAAK,CAAC,GAAGlC,GAAG,mBAAmB,EAAE;QAChDyD,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CtB,WAAW,EAAE,SAAS;QACtBuB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;MAChC,CAAC,CAAC;MAEF,MAAMS,GAAG,GAAG,MAAMN,IAAI,CAACO,IAAI,CAAC,CAAC;MAC7B,IAAI,CAACP,IAAI,CAACnB,EAAE,EAAE;QACV,MAAM,IAAIC,KAAK,CACXwB,GAAG,IAAI,8DACX,CAAC;MACL;MAEA,MAAMvB,IAAI,GAAGuB,GAAG,GAAGF,IAAI,CAACI,KAAK,CAACF,GAAG,CAAC,GAAG,IAAI;MACzC3E,cAAc,CAAC,CAACoD,IAAI,CAAC,CAAC;MACtBxC,QAAQ,CAAC,kBAAkB,CAAC;IAChC,CAAC,CAAC,OAAOkE,GAAG,EAAE;MACVrB,OAAO,CAACC,KAAK,CAACoB,GAAG,CAAC;MAClBnE,YAAY,CAAC,gCAAgCmE,GAAG,CAACC,OAAO,EAAE,CAAC;IAC/D;EACJ,CAAC;;EAED;EACA,MAAMC,cAAc,GAAGrF,OAAO,CAAC,MAAM;IACjC,MAAMsF,CAAC,GAAG,IAAIjD,IAAI,CAAC,CAAC;IACpBiD,CAAC,CAACC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IAClB,OAAO,GAAGD,CAAC,CAACzD,WAAW,CAAC,CAAC,IAAIJ,GAAG,CAAC6D,CAAC,CAACxD,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIL,GAAG,CACrD6D,CAAC,CAACvD,OAAO,CAAC,CACd,CAAC,IAAIN,GAAG,CAAC6D,CAAC,CAACtD,QAAQ,CAAC,CAAC,CAAC,IAAIP,GAAG,CAAC6D,CAAC,CAACrD,UAAU,CAAC,CAAC,CAAC,EAAE;EACnD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMuD,qBAAqB,GAAGA,CAAA,KAAM;IAChC,MAAMjD,KAAK,GAAGJ,kBAAkB,CAAC5B,SAAS,CAAC;IAC3C,MAAM0C,UAAU,GAAGX,kBAAkB,CAACC,KAAK,CAAC;IAC5C,MAAMkD,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAGpE,OAAO,EAAEoE,CAAC,IAAInE,OAAO,EAAEmE,CAAC,IAAI,EAAE,EAAE;MACzC,MAAMC,QAAQ,GAAGpD,KAAK,IAAImD,CAAC,GAAGzC,UAAU;MACxC,MAAM2C,KAAK,GACPF,CAAC,GAAG,EAAE,GACA,GAAGA,CAAC,MAAM,GACV,GAAG7C,IAAI,CAACC,KAAK,CAAC4C,CAAC,GAAG,EAAE,CAAC,OAAOA,CAAC,GAAG,EAAE,GAAG,IAAIA,CAAC,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE;MACtED,KAAK,CAACI,IAAI,cACN1F,OAAA;QAAgBiC,KAAK,EAAEsD,CAAE;QAACC,QAAQ,EAAEA,QAAS;QAAAG,QAAA,GACxCF,KAAK,EACLD,QAAQ,GAAG,kBAAkB,GAAG,EAAE;MAAA,GAF1BD,CAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGN,CACZ,CAAC;IACL;IACA,OAAOT,KAAK;EAChB,CAAC;EAED,MAAMlD,KAAK,GAAGJ,kBAAkB,CAAC5B,SAAS,CAAC;EAC3C,MAAM4F,iBAAiB,GAAG7D,kBAAkB,CAACC,KAAK,CAAC;EACnD,MAAM6D,UAAU,GACZ7D,KAAK,IAAI9B,OAAO,GAAG,IAAI4B,IAAI,CAACE,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGlC,OAAO,GAAG,KAAK,CAAC,GAAG,IAAI;EAEzE,oBACIN,OAAA;IAAMkG,QAAQ,EAAEjC,YAAa;IAACkC,SAAS,EAAC,kBAAkB;IAAAR,QAAA,gBAEtD3F,OAAA;MAAOoG,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEC,YAAY,EAAE;MAAE,CAAE;MAAAX,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACR/F,OAAA;MACIuG,IAAI,EAAC,gBAAgB;MACrBtE,KAAK,EAAE7B,SAAU;MACjBwC,GAAG,EAAEsC,cAAe;MACpBsB,QAAQ,EAAG9C,CAAC,IAAK;QACbrD,YAAY,CAACqD,CAAC,CAAC+C,MAAM,CAACxE,KAAK,CAAC;QAC5BpB,YAAY,CAAC,EAAE,CAAC;MACpB,CAAE;MACF6F,QAAQ;IAAA;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eACF/F,OAAA;MAAOoG,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEM,SAAS,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAjB,QAAA,GAAC,8BACjC,eAAA3F,OAAA;QAAA2F,QAAA,EAAQ;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,8BAE1D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAGR/F,OAAA;MAAOoG,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEQ,MAAM,EAAE;MAAa,CAAE;MAAAlB,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvE/F,OAAA;MACIiC,KAAK,EAAE3B,OAAQ;MACfkG,QAAQ,EAAG9C,CAAC,IAAK;QACbnD,UAAU,CAAC8D,MAAM,CAACX,CAAC,CAAC+C,MAAM,CAACxE,KAAK,CAAC,CAAC;QAClCpB,YAAY,CAAC,EAAE,CAAC;MACpB,CAAE;MACF6F,QAAQ;MAAAf,QAAA,EAEPN,qBAAqB,CAAC;IAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACT/F,OAAA;MAAOoG,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEM,SAAS,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAjB,QAAA,GAAC,yCAC3B,EAAC,GAAG,EACrCvD,KAAK,GACA4D,iBAAiB,GAAG7E,OAAO,GACvB,sFAAsF,GACtF,6BAA6B6E,iBAAiB,uBAAuB,GACzE,yDAAyD;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,eAGR/F,OAAA;MAAOoG,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEQ,MAAM,EAAE;MAAa,CAAE;MAAAlB,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvE/F,OAAA;MACIiC,KAAK,EAAEzB,WAAY;MACnBgG,QAAQ,EAAG9C,CAAC,IAAKjD,cAAc,CAACiD,CAAC,CAAC+C,MAAM,CAACxE,KAAK,CAAE;MAChDyE,QAAQ;MACRlB,QAAQ,EAAEQ,iBAAiB,GAAG7E,OAAQ;MAAAwE,QAAA,gBAEtC3F,OAAA;QAAQiC,KAAK,EAAC,EAAE;QAAA0D,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACzCrF,eAAe,CAACoG,GAAG,CAAE/C,CAAC,iBACnB/D,OAAA;QAAmBiC,KAAK,EAAE8B,CAAC,CAACvD,WAAY;QAAAmF,QAAA,GAAC,QAC/B,EAAC5B,CAAC,CAACvD,WAAW,EAAC,IAAE,EAACuD,CAAC,CAACgD,aAAa,EAAC,SAC5C;MAAA,GAFahD,CAAC,CAACiD,EAAE;QAAApB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAGRE,UAAU,iBACPjG,OAAA;MAAOoG,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEM,SAAS,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAjB,QAAA,GAAC,OACxD,EAAC,GAAG,EACRM,UAAU,CAACgB,kBAAkB,CAAC,OAAO,EAAE;QACpCC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACZ,CAAC,CAAC,EAAE,GAAG,EAAC,2BAEZ;IAAA;MAAAvB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CACV,EAGAnF,SAAS,iBACNZ,OAAA;MAAGoG,KAAK,EAAE;QAAEQ,KAAK,EAAE,SAAS;QAAED,SAAS,EAAE;MAAG,CAAE;MAAAhB,QAAA,EAAE/E;IAAS;MAAAgF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAChE,eAED/F,OAAA;MACIuG,IAAI,EAAC,QAAQ;MACbH,KAAK,EAAE;QAAEO,SAAS,EAAE;MAAG,CAAE;MACzBnB,QAAQ,EAAEQ,iBAAiB,GAAG7E,OAAQ;MAAAwE,QAAA,EACzC;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEf;AAAC5F,EAAA,CAzQQF,eAAe;EAAA,QAOHH,WAAW;AAAA;AAAAsH,EAAA,GAPvBnH,eAAe;AA2QxB,eAAeA,eAAe;AAAC,IAAAmH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}