{"ast":null,"code":"var _jsxFileName = \"/Users/maciejjanowski/IdeaProjects/reservationSystem/reservationSystem/frontend/src/components/IstLoggedCheck.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\n// Komponente zur Prüfung, ob der Benutzer bereits eingeloggt ist\n// Wenn ja, erfolgt eine Weiterleitung zur /myaccount-Seite\n// Wenn nicht, wird das übergebene Kind-Element (z. B. Login-Formular) gerendert\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IstLoggedCheck({\n  children\n}) {\n  _s();\n  const [isLogged, setIsLogged] = useState(false); // Status: eingeloggt oder nicht\n  const [isLoading, setIsLoading] = useState(true); // Wird geprüft?\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Anfrage zur Authentifizierungsprüfung\n        const res = await fetch(\"http://localhost:8080/auth/auth_check\", {\n          method: \"GET\",\n          credentials: \"include\" // JWT-Cookie wird mitgeschickt\n        });\n        if (res.ok) {\n          setIsLogged(true); // Benutzer ist eingeloggt\n        } else {\n          setIsLogged(false); // Benutzer ist nicht eingeloggt\n        }\n      } catch (error) {\n        setIsLogged(false); // Bei Fehler: als nicht eingeloggt behandeln\n      } finally {\n        setIsLoading(false); // Prüfung abgeschlossen\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Solange geprüft wird: Ladehinweis anzeigen\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Anmeldung wird \\xFCberpr\\xFCft...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Wenn eingeloggt → weiterleiten zu /myaccount\n  if (isLogged) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/myaccount\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Wenn nicht eingeloggt → ursprüngliche Komponente rendern\n  return children;\n}\n_s(IstLoggedCheck, \"Mbg87jpAx1zLHY3HojZHZcHgZd0=\", false, function () {\n  return [useNavigate];\n});\n_c = IstLoggedCheck;\nvar _c;\n$RefreshReg$(_c, \"IstLoggedCheck\");","map":{"version":3,"names":["useEffect","useState","Navigate","useNavigate","jsxDEV","_jsxDEV","IstLoggedCheck","children","_s","isLogged","setIsLogged","isLoading","setIsLoading","navigate","checkAuth","res","fetch","method","credentials","ok","error","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/Users/maciejjanowski/IdeaProjects/reservationSystem/reservationSystem/frontend/src/components/IstLoggedCheck.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\n// Komponente zur Prüfung, ob der Benutzer bereits eingeloggt ist\n// Wenn ja, erfolgt eine Weiterleitung zur /myaccount-Seite\n// Wenn nicht, wird das übergebene Kind-Element (z. B. Login-Formular) gerendert\n\nexport default function IstLoggedCheck({ children }) {\n    const [isLogged, setIsLogged] = useState(false); // Status: eingeloggt oder nicht\n    const [isLoading, setIsLoading] = useState(true); // Wird geprüft?\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            try {\n                // Anfrage zur Authentifizierungsprüfung\n                const res = await fetch(\"http://localhost:8080/auth/auth_check\", {\n                    method: \"GET\",\n                    credentials: \"include\", // JWT-Cookie wird mitgeschickt\n                });\n\n                if (res.ok) {\n                    setIsLogged(true); // Benutzer ist eingeloggt\n                } else {\n                    setIsLogged(false); // Benutzer ist nicht eingeloggt\n                }\n            } catch (error) {\n                setIsLogged(false); // Bei Fehler: als nicht eingeloggt behandeln\n            } finally {\n                setIsLoading(false); // Prüfung abgeschlossen\n            }\n        };\n\n        checkAuth();\n    }, []);\n\n    // Solange geprüft wird: Ladehinweis anzeigen\n    if (isLoading) {\n        return <p>Anmeldung wird überprüft...</p>;\n    }\n\n    // Wenn eingeloggt → weiterleiten zu /myaccount\n    if (isLogged) {\n        return <Navigate to=\"/myaccount\" />;\n    }\n\n    // Wenn nicht eingeloggt → ursprüngliche Komponente rendern\n    return children;\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;;AAExD;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACZ,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UAC7DC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE,SAAS,CAAE;QAC5B,CAAC,CAAC;QAEF,IAAIH,GAAG,CAACI,EAAE,EAAE;UACRT,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACHA,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACxB;MACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;QACZV,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,SAAS;QACNE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACzB;IACJ,CAAC;IAEDE,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIH,SAAS,EAAE;IACX,oBAAON,OAAA;MAAAE,QAAA,EAAG;IAA2B;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC7C;;EAEA;EACA,IAAIf,QAAQ,EAAE;IACV,oBAAOJ,OAAA,CAACH,QAAQ;MAACuB,EAAE,EAAC;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvC;;EAEA;EACA,OAAOjB,QAAQ;AACnB;AAACC,EAAA,CA1CuBF,cAAc;EAAA,QAIjBH,WAAW;AAAA;AAAAuB,EAAA,GAJRpB,cAAc;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}